from flask import Flask, request, jsonify
from flask_mysqldb import MySQL
from flask_jwt_extended import create_access_token, jwt_required, JWTManager
from werkzeug.security import generate_password_hash, check_password_hash
import MySQLdb.cursors

app = Flask(__name__)

# Configurations MySQL
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'password'
app.config['MYSQL_DB'] = 'ecommerce'
mysql = MySQL(app)

# Configuration JWT
app.config['JWT_SECRET_KEY'] = 'secret-key'
jwt = JWTManager(app)

### 1. POST /api/register
@app.route('/api/register', methods=['POST'])
def register():
    data = request.json
    phone_number = data.get('phone_number')
    password = generate_password_hash(data.get('password'))
    nom = data.get('nom', '')
    email = data.get('email', '')

    cursor = mysql.connection.cursor()
    try:
        cursor.execute("INSERT INTO users (phone_number, password, nom, email) VALUES (%s, %s, %s, %s)", 
                       (phone_number, password, nom, email))
        mysql.connection.commit()
        return jsonify({'message': 'Utilisateur enregistré avec succès'}), 201
    except MySQLdb.IntegrityError:
        return jsonify({'message': 'Numéro de téléphone déjà utilisé'}), 409
    finally:
        cursor.close()

### 2. POST /api/login
@app.route('/api/login', methods=['POST'])
def login():
    data = request.json
    phone_number = data.get('phone_number')
    password = data.get('password')

    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute("SELECT id, password FROM users WHERE phone_number = %s", (phone_number,))
    user = cursor.fetchone()
    cursor.close()

    if user and check_password_hash(user['password'], password):
        access_token = create_access_token(identity=user['id'])
        return jsonify(access_token=access_token), 200
    else:
        return jsonify({'message': 'Numéro de téléphone ou mot de passe incorrect'}), 401

### 3. POST /api/logout
@app.route('/api/logout', methods=['POST'])
@jwt_required()
def logout():
    # Avec JWT, la déconnexion côté serveur n'est pas triviale.
    # Vous pouvez implémenter un système de blacklist si nécessaire.
    return jsonify({'message': 'Déconnexion réussie (fonctionnalité à implémenter)}'), 200

### 4. GET /api/user/<user_id>
@app.route('/api/user/<int:user_id>', methods=['GET'])
@jwt_required()
def get_user(user_id):
    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute("SELECT id, phone_number, nom, email FROM users WHERE id = %s", (user_id,))
    user = cursor.fetchone()
    cursor.close()

    if user:
        return jsonify(user), 200
    else:
        return jsonify({'message': 'Utilisateur non trouvé'}), 404

### 5. PUT /api/user/<user_id>
@app.route('/api/user/<int:user_id>', methods=['PUT'])
@jwt_required()
def update_user(user_id):
    data = request.json
    nom = data.get('nom')
    email = data.get('email')

    cursor = mysql.connection.cursor()
    cursor.execute("UPDATE users SET nom = %s, email = %s WHERE id = %s", (nom, email, user_id))
    mysql.connection.commit()
    cursor.close()

    return jsonify({'message': 'Utilisateur mis à jour avec succès'}), 200

### 6. DELETE /api/user/<user_id>
@app.route('/api/user/<int:user_id>', methods=['DELETE'])
@jwt_required()
def delete_user(user_id):
    cursor = mysql.connection.cursor()
    cursor.execute("DELETE FROM users WHERE id = %s", (user_id,))
    mysql.connection.commit()
    cursor.close()

    return jsonify({'message': 'Utilisateur supprimé avec succès'}), 200

if __name__ == '__main__':
    app.run(debug=True)
